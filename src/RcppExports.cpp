// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// irf_varma_rcpp
arma::cube irf_varma_rcpp(const arma::cube& A_cube, const arma::cube& M_cube, const arma::mat& P, int horizon);
RcppExport SEXP _varma_irf_varma_rcpp(SEXP A_cubeSEXP, SEXP M_cubeSEXP, SEXP PSEXP, SEXP horizonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type A_cube(A_cubeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M_cube(M_cubeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type horizon(horizonSEXP);
    rcpp_result_gen = Rcpp::wrap(irf_varma_rcpp(A_cube, M_cube, P, horizon));
    return rcpp_result_gen;
END_RCPP
}
// sim_varma_rcpp
arma::mat sim_varma_rcpp(const arma::cube& A, const arma::cube& M, const arma::mat& eps);
RcppExport SEXP _varma_sim_varma_rcpp(SEXP ASEXP, SEXP MSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_varma_rcpp(A, M, eps));
    return rcpp_result_gen;
END_RCPP
}
// solve_riccati
arma::mat solve_riccati(const arma::mat& T, const arma::mat& R, const arma::mat& Q);
RcppExport SEXP _varma_solve_riccati(SEXP TSEXP, SEXP RSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_riccati(T, R, Q));
    return rcpp_result_gen;
END_RCPP
}
// solve_syl
arma::mat solve_syl(const arma::mat& A, const arma::mat& B, const arma::mat& C);
RcppExport SEXP _varma_solve_syl(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_syl(A, B, C));
    return rcpp_result_gen;
END_RCPP
}
// solve_dlyap_iter
arma::mat solve_dlyap_iter(const arma::sp_mat& T, const arma::mat& C, int max_iter, double tol);
RcppExport SEXP _varma_solve_dlyap_iter(SEXP TSEXP, SEXP CSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_dlyap_iter(T, C, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// kalmanLogLik
double kalmanLogLik(const arma::sp_mat& T, const arma::sp_mat& R, const arma::mat& Q, arma::mat& a1, arma::mat& P1, const arma::mat& Yt, const bool update_state);
RcppExport SEXP _varma_kalmanLogLik(SEXP TSEXP, SEXP RSEXP, SEXP QSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP YtSEXP, SEXP update_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Yt(YtSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_state(update_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(kalmanLogLik(T, R, Q, a1, P1, Yt, update_state));
    return rcpp_result_gen;
END_RCPP
}
// kalman
double kalman(const arma::sp_mat& T, const arma::sp_mat& R, const arma::mat& Q, arma::mat& at, arma::Cube<double>& Pt, const arma::mat& Yt, arma::mat& v, arma::Cube<double>& F, const bool update_state);
RcppExport SEXP _varma_kalman(SEXP TSEXP, SEXP RSEXP, SEXP QSEXP, SEXP atSEXP, SEXP PtSEXP, SEXP YtSEXP, SEXP vSEXP, SEXP FSEXP, SEXP update_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type at(atSEXP);
    Rcpp::traits::input_parameter< arma::Cube<double>& >::type Pt(PtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Yt(YtSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::Cube<double>& >::type F(FSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_state(update_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(kalman(T, R, Q, at, Pt, Yt, v, F, update_state));
    return rcpp_result_gen;
END_RCPP
}
// sur_cpp
arma::vec sur_cpp(const Rcpp::List& X_list, const Rcpp::List& y_list, const arma::mat& sigma);
RcppExport SEXP _varma_sur_cpp(SEXP X_listSEXP, SEXP y_listSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type y_list(y_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sur_cpp(X_list, y_list, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_varma_irf_varma_rcpp", (DL_FUNC) &_varma_irf_varma_rcpp, 4},
    {"_varma_sim_varma_rcpp", (DL_FUNC) &_varma_sim_varma_rcpp, 3},
    {"_varma_solve_riccati", (DL_FUNC) &_varma_solve_riccati, 3},
    {"_varma_solve_syl", (DL_FUNC) &_varma_solve_syl, 3},
    {"_varma_solve_dlyap_iter", (DL_FUNC) &_varma_solve_dlyap_iter, 4},
    {"_varma_kalmanLogLik", (DL_FUNC) &_varma_kalmanLogLik, 7},
    {"_varma_kalman", (DL_FUNC) &_varma_kalman, 9},
    {"_varma_sur_cpp", (DL_FUNC) &_varma_sur_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_varma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
